static const char COOLSPHEREFRAG[] =
"varying float tcoord;\n"
"varying float c;\n"
"varying float maxsqlength;\n"
"varying vec4 color;\n"
"varying vec3 spherepos;\n"
"varying vec3 rayorigin;\n"
"varying vec3 raydir;\n"
"varying vec3 RS;\n" 
"vec3 lightDir = vec3( 0, 0, -1 );\n"
"float kd = 1.0;\n"
"float ka = 0.01;\n"
"float ks = .5;\n"
"float sh = 90.0;\n"
"vec3 refcolor = vec3( 1, 1, 1 );\n"
"\n"
"const float C1 = 0.429043;\n"
"const float C2 = 0.511664;\n"
"const float C3 = 0.743125;\n"
"const float C4 = 0.886227;\n"
"const float C5 = 0.247708;\n"
"// Constants for Grace Cathedral lighting\n"
"const vec3 L00  = vec3( 0.78908,  0.43710,  0.54161);\n"
"const vec3 L1m1 = vec3( 0.39499,  0.34989,  0.60488);\n"
"const vec3 L10  = vec3(-0.33974, -0.18236, -0.26940);\n"
"const vec3 L11  = vec3(-0.29213, -0.05562,  0.00944);\n"
"const vec3 L2m2 = vec3(-0.11141, -0.05090, -0.12231);\n"
"const vec3 L2m1 = vec3(-0.26240, -0.22401, -0.47479);\n"
"const vec3 L20  = vec3(-0.15570, -0.09471, -0.14733);\n"
"const vec3 L21  = vec3( 0.56014,  0.21444,  0.13915);\n"
"const vec3 L22  = vec3( 0.21205, -0.05432, -0.30374);\n"
"\n"
"vec4 ComputeColor( in vec3 n )\n"
"{\n"
"  float ScaleFactor = 0.9;\n" 
"  vec3 tnorm = faceforward( n, lightDir, n );\n"
"  vec3 DiffuseColor    = C1 * L22 * (tnorm.x * tnorm.x - tnorm.y * tnorm.y) +\n"
"                     C3 * L20 * tnorm.z * tnorm.z +\n"
"                      C4 * L00 -\n"
"                      C5 * L20 +\n"
"                      2.0 * C1 * L2m2 * tnorm.x * tnorm.y +\n"
"                      2.0 * C1 * L21  * tnorm.x * tnorm.z +\n"
"                      2.0 * C1 * L2m1 * tnorm.y * tnorm.z +\n"
"                      2.0 * C2 * L11  * tnorm.x +\n"
"                      2.0 * C2 * L1m1 * tnorm.y +\n"
"                      2.0 * C2 * L10  * tnorm.z;\n"
"\n"
"  DiffuseColor   *= vec3( color ) * ScaleFactor;\n"
"  return vec4( DiffuseColor, color.a );\n" 
"}\n"
"void main(void)\n"
"{\n"
"  float a = dot( raydir, raydir );\n"
"  if( a > maxsqlength ) discard;\n"
"  float b = 2.0 * dot( RS, raydir );\n"
"  float delta = ( b * b - 4. * a * c );\n"
"  if( delta < 0.0 ) discard;\n"
"  float d = sqrt( delta );\n"
"  a = 1. / a;\n"
"  a *= .5;\n"
"  float t2 = ( -b + d ) * a;\n"
"  float t1 = ( -b - d ) * a;\n"
"  float t = min( t1, t2 );\n"
"  if( t < 0.0 ) discard;\n"
"  vec3 P = rayorigin + t * raydir;\n"
"  vec3 N = normalize( P - spherepos );\n"
"  gl_FragColor = ComputeColor( N );\n"	  
"  float z = dot( vec4( P, 1 ), gl_ProjectionMatrixTranspose[ 2 ] );\n"
"  float w = dot( vec4( P, 1 ), gl_ProjectionMatrixTranspose[ 3 ] );\n"
"  gl_FragDepth = 0.5 * ( z / w + 1.0 );\n"
"}\n";





static const char BILLBOARD_CYLINDER4VERT[] =
"uniform mat4 Q;\n"
"uniform mat4 osg_ViewMatrixInverse;\n"
"uniform mat4 osg_ViewMatrix;\n"
"uniform vec3 axis;\n"
"uniform vec3 center;\n"
"varying float a;\n"
"varying float b;\n"
"varying float c;\n"
"varying float d;\n"
"varying float e;\n"
"varying float f;\n"
"varying float g;\n"
"varying float h;\n"
"varying float i;\n"
"varying float j;\n"
"varying vec3 raydir;\n"
"varying vec3 rayorigin;\n"
"varying vec3 ccenter;\n"
"varying vec3 tyaxis;\n"
"void main()\n"
"{\n"

"  mat4 VMI = mat4( mat3( osg_ViewMatrixInverse ) );\n"
"  mat4 VMIT = transpose( VMI );\n"
"  mat4 M = VMIT * Q * VMI;\n"

"  a = M[ 0 ][ 0 ];\n"
"  b = M[ 1 ][ 1 ];\n"
"  c = M[ 2 ][ 2 ];\n"
"  d = M[ 1 ][ 0 ];\n"
"  e = M[ 2 ][ 0 ];\n"
"  f = M[ 2 ][ 1 ];\n"
"  g = M[ 3 ][ 0 ];\n"
"  h = M[ 3 ][ 1 ];\n"
"  i = M[ 3 ][ 2 ];\n"
"  j = M[ 3 ][ 3 ];\n"

"  ccenter = gl_ModelViewMatrix * vec4( center, 1 );\n"
"  tyaxis = normalize( mat3( osg_ViewMatrix ) * axis ); // should be transpose( inverse( osg_ViewMatrix ) ) * axis;\n"

"  bool perspective = gl_ProjectionMatrix[ 3 ][ 3 ] < 0.001 && gl_ProjectionMatrix[ 2 ][ 3 ] != 0.0;\n"

"  vec4 p = gl_ModelViewMatrix * gl_Vertex;\n"
"  gl_ClipVertex = p;\n"

"  if( perspective )\n"
"  {\n"
"    raydir = vec3( p ) / p.w;\n"
"    rayorigin = vec3( 0, 0, 0 );\n"
"  }\n"
"  else\n"
"  {\n"
"    raydir = vec3( 0, 0, -1 );\n"
"    rayorigin = vec3( p.x / p.w, p.y / p.w, 0 );\n"
"  }\n"
"  gl_Position = gl_ProjectionMatrix * p;\n"
"}\n";
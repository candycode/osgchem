static const char SSAOPOINTSPHEREVERT[] =
"varying vec3 spherepos;\n"
"varying vec4 color;\n"
"uniform vec2 osg_Viewport;\n"
"uniform float radius;\n"
"varying vec3 rayorigin;\n"
"varying float pointSize;\n"
"uniform int shade;\n"
"/*uniform*/ float saturation = 0.5;\n"
"void main(void)\n"
"{\n"
"  if( bool( shade ) ) color = vec4( saturation * gl_Color.rgb + ( 1.0 - saturation ) * vec3( 1., 1., 1. ), gl_Color.a );\n" 
"  vec4 P = gl_ModelViewMatrix * gl_Vertex;\n"
"  bool perspective = gl_ProjectionMatrix[ 3 ][ 3 ] < 0.001 && gl_ProjectionMatrix[ 2 ][ 3 ] != 0.0;\n"
"  if( perspective )\n"
"  {\n"
"    rayorigin = vec3( 0, 0, 0 );\n"
"  }\n"
"  else\n"
"  {\n"
"    rayorigin = vec3( P.x / P.w, P.y / P.w, 0 );\n"
"  }\n"
"  spherepos = vec3( P ) / P.w;\n"
"  // compute pixel size\n"
"  vec3 raydir = normalize( spherepos - rayorigin );\n"
"  vec3 axis1 = cross( raydir, vec3( 0., 1., 0. ) );\n"
"  vec3 displacedCenter = spherepos - radius * raydir;\n"
"  gl_Position = gl_ProjectionMatrix * vec4( displacedCenter, 1.0 );\n"
"  vec4 xp1 = gl_ProjectionMatrix * vec4( displacedCenter - radius * axis1, 1.0 );\n"
"  vec4 xp2 = gl_ProjectionMatrix * vec4( displacedCenter + radius * axis1, 1.0 );\n"
"  float xv1 = osg_Viewport.x * .5 * ( xp1.x / xp1.w + 1.0 );\n" 
"  float xv2 = osg_Viewport.x * .5 * ( xp2.x / xp2.w + 1.0 );\n"
"  gl_PointSize = abs( xv1 - xv2 );\n"
"  pointSize = gl_PointSize;\n"
"}\n";

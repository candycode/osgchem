static const char SSAOPOINTSPHEREFRAG_TRACE_VERT[] =
"uniform float radius;\n"
"uniform vec2 osg_Viewport;\n"
"uniform int ssao;\n"
"uniform int shade;\n"
"uniform float occlusionFactor;\n"
"varying vec4 color;\n"
"varying vec3 rayorigin;\n"
"vec3 raydir;\n"
"varying vec3 spherepos;\n"
"float sphereradsq;\n"
"varying float pointSize;\n"
"\n"
"float width = osg_Viewport.x;\n"
"float height = osg_Viewport.y;\n"
"varying float occlusionValue;\n"
"struct I\n"
"{\n"
"  vec3 P;\n"
"  vec3 N;\n"
"  float t;  \n"
"};\n"
"\n"
"vec3 refcolor = vec3( .1, .1, .1 );\n"
"vec3 lightDir = vec3( 0., 0., -1. );\n"
"// computes intersection of ray with sphere\n"
"I ComputeRaySphereIntersection( vec3 C, vec3 D )\n"
"{\n"
"  I i;\n"
"  i.t = -1.0;\n"
"  vec3 P = C - spherepos;\n"
"  float a = D.x * D.x + D.y * D.y + D.z * D.z;\n"
"  float b = 2.0 * ( D.x * P.x + D.y * P.y + D.z * P.z );\n"
"  float c = P.x * P.x + P.y * P.y + P.z * P.z - sphereradsq;\n"
"  float delta = ( b * b - 4. * a * c );\n"
"  if( delta < 0.0 ) return i;\n"
"  float d = sqrt( delta );\n"
"  a = .5 / a;\n"
"  float t2 = ( -b + d ) * a;\n"
"  float t1 = ( -b - d ) * a;\n"
"  float t = min( t1, t2 );\n"
"  if( t < 0.0 ) return i;\n"
"  i.P = C + t * D;\n"
"  i.N = normalize( i.P - spherepos );\n"
"  i.t = t;\n"
"  return i;\n"
"}\n"
"float kd = 1.0;\n"
"float ka = 0.0;\n"
"float ks = 0.0;\n"
"float sh = 90.0;\n"
"vec4 ComputeColor( vec3 n )\n"
"{\n"
"  return vec4( color.rgb * dot( vec3( 0., 0., 1. ), n ), color.a );\n"
"  //color.rgb += vec3( .1, .1, .1 );\n"
"  //if( pointSize < 6.0 ) return color;\n"
"  vec3 N = faceforward( n, lightDir, n );\n"
"  float d = dot( N, -normalize( lightDir ) );\n"
"  float s = pow( max( 0.0, dot( vec3( 0, 0, 1 ), reflect( lightDir, N ) ) ), sh );\n"
"  //if( length( color.rgb ) < 0.75 ) ks = 0.;\n" 
"  return vec4(  ks * s * refcolor + kd * d * color.rgb + ka * color.rgb, color.a );\n"
"}\n"
"void main(void)\n"
"{\n"
"  //if( pointSize > 255.0 || pointSize < 2.0 ) discard;\n"
"  sphereradsq = radius * radius;\n"
"  bool perspective = gl_ProjectionMatrix[ 3 ][ 3 ] < 0.001 && gl_ProjectionMatrix[ 2 ][ 3 ] != 0.0;\n"
"  vec3 fc = vec3( gl_FragCoord );// * gl_FragCoord.w;\n"
"  fc.x = gl_FragCoord.x / osg_Viewport.x;\n"
"  fc.y = gl_FragCoord.y / osg_Viewport.y;\n"
"  fc.z = gl_FragCoord.z;\n"
"  fc *= 2.0;\n"
"  fc -= 1.0;\n"
"  vec4 p = gl_ProjectionMatrixInverse * vec4( fc, 1. );\n"
"  if( perspective )\n"
"  {\n"
"    raydir = vec3( p ) / p.w;\n"
"  }  \n"
"  else\n"
"  {\n"
"    raydir = vec3( 0, 0, -1 );\n"
"  }\n"
"  I i = ComputeRaySphereIntersection( rayorigin, raydir );\n"
"  if( i.t < 0.0 ) discard;\n"
"  if( bool( shade ) ) gl_FragColor = ComputeColor( i.N );\n"
"  float z = dot( vec4( i.P, 1 ), gl_ProjectionMatrixTranspose[ 2 ] );\n"
"  float w = dot( vec4( i.P, 1 ), gl_ProjectionMatrixTranspose[ 3 ] );\n"
"  gl_FragDepth = 0.5 * ( z / w + 1.0 );\n"
"  if( bool( ssao ) && bool( shade ) )\n"
"  {\n"
"    gl_FragColor.rgb *= 1 - smoothstep( 0., 1., occlusionValue * occlusionFactor );\n"
"  }\n"
"}\n";

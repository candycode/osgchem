static const char SPHEREFRAG[] =
"varying float tcoord;\n"
"varying float c;\n"
"varying float maxsqlength;\n"
"varying vec4 color;\n"
"varying vec3 spherepos;\n"
"varying vec3 rayorigin;\n"
"varying vec3 raydir;\n"
"varying vec3 RS;\n" 
"vec3 lightDir = vec3( 0, 0, -1 );\n"
"float kd = 1.0;\n"
"float ka = 0.01;\n"
"float ks = .5;\n"
"float sh = 90.0;\n"
"vec3 refcolor = vec3( 1, 1, 1 );\n"
"vec4 ComputeColor( vec3 n )\n"
"{\n"
"  vec3 N = faceforward( n, lightDir, n );\n"
"  float d = dot( N, -normalize( lightDir ) );\n"
"  float s = pow( max( 0.0, dot( vec3( 0, 0, 1 ), reflect( lightDir, N ) ) ), sh );\n"
"  //float rn = max( 0., dot( normalize( -raydir ), n ) );\n"
"  //float alpha = rn < 0.1 ? 0.1 : 1.0;\n"
"  return vec4( ( ks * s * refcolor + kd * d * color.rgb + ka * color.rgb ), color.a );\n"
"}\n"
"void main(void)\n"
"{\n"
"  float a = dot( raydir, raydir );\n"
"  if( a > maxsqlength ) discard;\n"
"  float b = 2.0 * dot( RS, raydir );\n"
"  float delta = ( b * b - 4. * a * c );\n"
"  if( delta < 0.0 ) discard;\n"
"  float d = sqrt( delta );\n"
"  a = 1. / a;\n"
"  float A = a * .5;\n"
"  float t2 = ( -b + d ) * A;\n"
"  float t1 = ( -b - d ) * A;\n"
"  float t = min( t1, t2 );\n"
"  if( t < 0.0 ) discard;\n"
"  vec3 P = rayorigin + t * raydir;\n"
"  vec3 N = normalize( P - spherepos );\n"
"  gl_FragColor = ComputeColor( N );\n"	  
"  float z = dot( vec4( P, 1 ), gl_ProjectionMatrixTranspose[ 2 ] );\n"
"  float w = dot( vec4( P, 1 ), gl_ProjectionMatrixTranspose[ 3 ] );\n"
"  gl_FragDepth = 0.5 * ( z / w + 1.0 );\n"
"}\n";



